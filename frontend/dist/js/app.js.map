{"version":3,"sources":["../deps/node_modules/browser-pack/_prelude.js","src/client.js","src/components/DevTools.js","src/components/Home.js","src/components/Post.js","src/components/PostEdit.js","src/components/PostList.js","src/components/PostNew.js","src/components/PostView.js","src/components/Root.js","src/helpers/ajax.js","src/helpers/api.js","src/helpers/createActionDispatchers.js","src/helpers/createStore.js","src/reducers/index.js","src/reducers/posts.js","src/reducers/time.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const React = require('react');\nconst ReactDOM = require('react-dom');\n\nconst createStore = require('./helpers/createStore');\nconst Root = React.createFactory(require('./components/Root'));\n\nconst moment = require('moment');\nconst timeActionCreators = require('./reducers/time');\n\nconst combinedReducers = require('./reducers');\n\n// TODO Section 6: Change code below to get data from the API\n\nwindow.main = (initialState) => {\n  // Create root React component with Redux store\n  const store = createStore(initialState);\n  const rootComponent = Root({ store });\n\n  // Mount React root component in DOM\n  const mountPoint = document.getElementById('root');\n  ReactDOM.render(rootComponent, mountPoint);\n\n  window.setInterval(() => {\n    const now = moment().format();\n    store.dispatch(timeActionCreators.setCurrentTime(now));\n  }, 10000);\n}\n","const React = require('react');\nconst ReduxDevtools = require('redux-devtools');\nconst DockMonitor = require('redux-devtools-dock-monitor').default;\nconst LogMonitor = require('redux-devtools-log-monitor').default;\n\nconst _DevTools = ReduxDevtools.createDevTools(\n  <DockMonitor toggleVisibilityKey=\"h\" changePositionKey=\"q\" defaultIsVisible={true}>\n    <LogMonitor />\n  </DockMonitor>\n);\n\nclass DevTools extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isMounted: false };\n  }\n\n  static instrument() {\n    return _DevTools.instrument(arguments);\n  }\n\n  componentDidMount() {\n    this.setState({ isMounted: true });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isMounted && <_DevTools />}\n      </div>\n    );\n  }\n};\n\n/**\n * Redux development tools (useful for debugging).\n */\nmodule.exports = DevTools;\n","const React = require('react');\n\nconst PostList = require('./PostList');\n\n/**\n * The guts of the home page.\n */\nconst Home = () => (\n  <div>\n    {/* The heading area of the page */}\n    <div className=\"blog-header\">\n      <h1 className=\"blog-title\">An Example of a Blog</h1>\n      <p className=\"lead blog-description\">React and Redux and Bootstrap, oh my!</p>\n    </div>\n    {/* A list of blog posts, including a couple of buttons */}\n    <PostList />\n  </div>\n);\n\nmodule.exports = Home;\n","const React = require('react');\n\nconst PostEdit = require('./PostEdit');\nconst PostView = require('./PostView');\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial internal state for this component\n    this.state = { editing: false };\n  }\n\n  render() {\n    const openEdit = () => {\n      this.setState({ editing: true });\n    };\n\n    const closeEdit = () => {\n      this.setState({ editing: false });\n    };\n\n    const saveEdit = (editedPost) => {\n      this.props.savePost(editedPost, (err) => {\n        if(!err) closeEdit();\n      });\n    };\n    const deleteThisPost = () => {\n      this.props.deletePost(this.props.post.id);\n    };\n\n    // TODO Section 8: Add code for delete\n\n    if(this.state.editing) {\n      // Render component for editing the post\n      return (\n        <PostEdit\n          post={this.props.post}\n          onSave={saveEdit}\n          onCancel={closeEdit}\n        />\n      );\n    }\n    // Render read-only view of the post\n    // TODO Section 8: add code for delete\n    return (\n      <PostView\n        post={this.props.post}\n        time={this.props.time}\n        onDelete={deleteThisPost}\n        onEdit={openEdit}\n      />\n    );\n  }\n}\n\n// Export the Post component\nmodule.exports = Post;\n","const React = require('react');\nconst _ = require('lodash');\n\n/**\n * A form for editing a blog post.\n */\nclass PostEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    const post = props.post || {};\n\n    this.state = {\n      title: post.title || '',\n      content: post.content || ''\n    };\n  }\n\n  render() {\n    const revertAndStopEditing = (event) => {\n      event.preventDefault();\n      this.props.onCancel();\n    };\n\n    const submitAndStopEditing = (event) => {\n      event.preventDefault();\n      // Creates a new post object and saves it.\n      const editedPost = _.assign({}, this.props.post, {\n        title: this.state.title,\n        content: this.state.content\n      });\n      this.props.onSave(editedPost);\n    };\n\n    const onTitleChange = (event) => {\n      this.setState({ title: event.target.value });\n    };\n\n    const onContentChange = (event) => {\n      this.setState({ content: event.target.value });\n    };\n\n    return (\n      <form className=\"blog-post\">\n        {/* Title field */}\n        <div className=\"form-group\">\n          <input className=\"form-control input-lg\" value={this.state.title}\n            placeholder=\"Post title\" onChange={onTitleChange}\n          />\n        </div>\n        {/* Content field */}\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control\"\n            style={{ height: 300 }}\n            value={this.state.content}\n            onChange={onContentChange}\n          />\n        </div>\n        {/* Save button */}\n        <button className=\"btn btn-default pull-right\"\n          onClick={submitAndStopEditing}\n        >\n          Save\n        </button>\n        {/* Cancel button */}\n        <button className=\"btn btn-default pull-right\"\n          style={{ marginRight: '12px' }}\n          onClick={revertAndStopEditing}\n        >\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nmodule.exports = PostEdit;\n","const React = require('react');\nconst ReactRedux = require('react-redux');\nconst _ = require('lodash');\n\nconst postsActionCreators = require('../reducers/posts');\nconst createActionDispatchers = require('../helpers/createActionDispatchers');\nconst Post = require('./Post');\nconst PostNew = require('./PostNew');\n\n/**\n * A list of blog posts, along with buttons for writing a new post\n * and loading more posts.\n */\nclass PostList extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial internal state for this component\n    this.state = { loading: false };\n  }\n\n  render() {\n    const onLoadButtonClick = () => {\n      // If we are not already in the process of loading posts,\n      // start loading more posts.\n      if(!this.state.loading) {\n        this.setState({ loading: true });\n        this.props.loadMorePosts(() => {\n          this.setState({ loading: false });\n        });\n      }\n    };\n\n    // Function which creates a post component from a post ID\n    const createPostComponent = (currentPost) => {\n      /* TODO Section 8: Add code for delete */\n      return (\n        <Post\n          key={currentPost.id}\n          post={currentPost}\n          time={this.props.time}\n          savePost={this.props.savePost}\n          deletePost={this.props.deletePost}\n        />\n      );\n    };\n\n    return (\n      <div className=\"row\">\n        <div className=\"blog-main\">\n          {/* Button for writing a new post */}\n          <PostNew\n            createPost={this.props.createPost}\n          />\n\n          {/* TODO Section 3: Write code to list all the posts */\n            this.props.posts.visiblePosts.map(createPostComponent)\n          }\n\n          {/* Button for loading more posts */}\n          <button className=\"blog-load-more btn btn-default btn-lg\"\n            onClick={onLoadButtonClick}\n            disabled={this.state.loading}\n          >\n            {this.state.loading ? 'Loading...' : 'Load more posts'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Connect PostList component to the Redux store\nconst PostListContainer = ReactRedux.connect(\n  // Map store state to props\n  (state) => ({\n    posts: state.posts,\n    time: state.time\n  }),\n  createActionDispatchers(postsActionCreators)\n)(PostList);\n\nmodule.exports = PostListContainer;\n","const React = require('react');\nconst PostEdit = require('./PostEdit');\n\n/**\n * A button which expands into a form for writing a new post.\n */\nclass PostNew extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial internal state for this component\n    this.state = { editing: false };\n  }\n\n  render() {\n    const openEdit = () => {\n      this.setState({ editing: true });\n    };\n\n    const closeEdit = () => {\n      this.setState({ editing: false });\n    };\n\n    const createPost = (newPost) => {\n      this.props.createPost(newPost, (err) => {\n        if(!err) closeEdit();\n      });\n    };\n\n    // TODO Section 7: Write code to switch to edit mode when editing is clicked\n    if(this.state.editing){\n      return(\n        <PostEdit\n          post={this.props.post}\n          onSave={createPost}\n          onCancel={closeEdit}\n        />\n      );\n    }\n\n    return (\n      <button className=\"blog-load-more btn btn-primary btn-lg\"\n        onClick={ openEdit }\n      >\n        Write new post\n      </button>\n    );\n  }\n}\n\nmodule.exports = PostNew;\n","const React = require('react');\nconst moment = require('moment');\n\n/**\n * Render edit/delete buttons and post timestamp.\n *\n * List of props: post, time, onEdit, onDelete\n */\nconst PostMeta = (props) => {\n  return (\n    <div className=\"blog-post-meta\">\n      <a role=\"button\" title=\"Edit post\"\n        style={{ paddingRight: '8px' }}\n        onClick={ props.onEdit }\n      >\n        <span className=\"fa fa-edit\" />\n      </a>\n\n      {/* TODO Section 8: Add a delete button */}\n      <a role=\"button\" title=\"Delete post\"\n      style={{ paddingRight: '8px' }}\n      onClick={ props.onDelete }\n      >\n        <span className=\"fa fa-remove\" />\n      </a>\n      { moment(props.post.createdAt).from(props.time.now) }\n    </div>\n  );\n};\n\n/**\n * A read-only view of a blog post.\n * This is a stateless functional component.\n * It takes props as its args and returns what the render method would return.\n *\n * List of props: post, time, onEdit, onDelete\n */\nconst PostView = (props) => {\n  return (\n    <div className=\"blog-post\">\n      <h2 className=\"blog-post-title\">{props.post.title}</h2>\n\n      {/* TODO Section 4: Display blog metadata */}\n      <PostMeta {...props} />\n\n      {/* TODO Section 4: Display blog content */}\n      <div className=\"blog-post-content\">{props.post.content}</div>\n    </div>\n  );\n};\n\nmodule.exports = PostView;\n","/**\n * The root React component from which all other components on the page are\n * descended. It is this component which is directly mounted on the DOM.\n */\n\nconst React = require('react');\nconst ReactRedux = require('react-redux');\n\nconst Provider = ReactRedux.Provider;\nconst Home = require('./Home');\n\n// Enable development tools when in development mode\nlet DevTools = 'span';\nif(process.env.NODE_ENV === 'development') {\n  DevTools = require('./DevTools');\n}\n\n// Define the Root component\nconst Root = (props) => {\n  return (\n    /* The Provider gives descendants the ability to connect to the Redux store */\n    <Provider store={props.store}>\n      <div>\n        {/* The Home component contains the guts of the page */}\n        <Home />\n        {/* DevTools is just an empty element when not in development mode */}\n        <DevTools />\n      </div>\n    </Provider>\n  );\n};\n\nmodule.exports = Root;\n","const ajax = {};\n\nif(process.env.IN_BROWSER) {\n  ajax.request = (opts) => {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest;\n      xhr.addEventListener('error', () => {\n        reject(new Error('Request failed'));\n      });\n      xhr.addEventListener('load', () => {\n        if(xhr.status !== 200) {\n          reject(new Error('Received status ' + xhr.status));\n        } else {\n          resolve(opts.json ? JSON.parse(xhr.responseText) : xhr.responseText);\n        }\n      });\n      xhr.open(opts.method, opts.url);\n      if(opts.json) {\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(opts.data !== undefined ? JSON.stringify(opts.data) : opts.data);\n      } else {\n        xhr.send(opts.data);\n      }\n    });\n  };\n} else {\n  const request = require('request');\n\n  ajax.request = (opts) => {\n    return new Promise((resolve, reject) => {\n      request({\n        url: opts.url,\n        method: opts.method,\n        body: opts.data,\n        json: opts.json\n      }, (error, response, body) => {\n        if(error) {\n          reject(error);\n        } else if(response.statusCode !== 200) {\n          reject(new Error('Received status ' + response.statusCode));\n        } else {\n          resolve(body);\n        }\n      });\n    });\n  };\n}\n\nmodule.exports = ajax;\n","const ajax = require('./ajax');\n\nconst api = {};\n\nif(process.env.IN_BROWSER) {\n  api.baseUrl = '/api';\n} else {\n  api.baseUrl = 'http://api:3000';\n}\n\napi.get = function(path) {\n  return ajax.request({\n    method: 'GET',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\napi.post = function(path, data) {\n  return ajax.request({\n    method: 'POST',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.put = function(path, data) {\n  return ajax.request({\n    method: 'PUT',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.delete = function(path) {\n  return ajax.request({\n    method: 'DELETE',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\nmodule.exports = api;\n","const _ = require('lodash');\n\nmodule.exports = function() {\n  // Get an array of arguments passed into this function\n  const actionCreatorsArray = _.assign([], arguments);\n\n  // Return a function that, when given a dispatch function, returns an\n  // object containing a bunch of action dispatchers\n  return (dispatch) =>\n    // Iterate over actionCreatorsArray, which is an array of arrays of action\n    // creators\n    actionCreatorsArray.reduce((actionDispatchers, actionCreators) => {\n      // Add an action dispatcher for each action creator in actionCreators\n      Object.keys(actionCreators)\n        .filter((name) => (typeof actionCreators[name] === 'function'))\n        .forEach((name) => {\n          actionDispatchers[name] = function() {\n            return dispatch(actionCreators[name].apply(this, arguments));\n          };\n        });\n      return actionDispatchers;\n    }, {});\n};\n","const Redux = require('redux');\nconst reduxThunk = require('redux-thunk').default;\nconst combinedReducers = require('../reducers');\n\nlet enhancer;\n\nif(process.env.NODE_ENV === 'production') {\n  enhancer = Redux.applyMiddleware(reduxThunk)\n} else {\n  const DevTools = require('../components/DevTools');\n\n  enhancer = Redux.compose(\n    // Enables middleware\n    Redux.applyMiddleware(reduxThunk),\n    // Enables DevTools\n    DevTools.instrument()\n  );\n}\n\nmodule.exports = initialState => {\n  const store = Redux.createStore(combinedReducers, initialState, enhancer);\n  return store;\n}\n","const Redux = require('redux');\n\nconst posts = require('./posts');\nconst time = require('./time');\n\nmodule.exports = Redux.combineReducers({\n  posts,\n  time\n});\n","const _ = require('lodash');\nconst api = require('../helpers/api');\n\n// Action type constants\nconst INSERT = 'blog-frontend/posts/INSERT';\nconst CHANGE = 'blog-frontend/posts/CHANGE';\nconst REMOVE = 'blog-frontend/posts/REMOVE';\n\n// The initial state of blog post data\nconst initialState = {\n  visiblePosts: [\n    { id: 5,\n      title: \"From Redux Store: Companies that make computers\",\n      content: \"Dell Apple Toshiba Acer\",\n      createdAt: \"2016-09-11T23:26:36.000Z\",\n      updatedAt: \"2016-09-11T23:26:36.000Z\"\n    },\n    {id: 4,\n     title: \"From Redux Store: Dell\",\n     content: \"A company that makes computers \",\n     createdAt: \"2016-09-11T23:18:08.000Z\",\n     updatedAt: \"2016-09-11T23:18:08.000Z\"\n    },\n    { id: 3,\n      title: \"From Redux Store: Lego Nexo Knights\",\n      content: \"The best lego toy set in the world.\",\n      createdAt: \"2016-09-11T07:47:30.000Z\",\n      updatedAt: \"2016-09-11T07:47:30.000Z\"\n    },\n    { id: 2,\n      title: \"From Redux Store: React\",\n      content: \"An awesome JavaScript library from …\",\n      createdAt: \"2016-09-11T07:46:55.000Z\",\n      updatedAt: \"2016-09-11T07:46:55.000Z\"\n    },\n    { id: 1,\n      title: \"From Redux Store: Deep Learning\",\n      content: \"The use of neural networks to learn…\",\n      createdAt: \"2016-09-11T07:46:28.000Z\",\n      updatedAt: \"2016-09-11T07:46:28.000Z\"\n    }\n\n  ]\n};\n\n// Function which takes the current data state and an action,\n// and returns a new state\nfunction reducer(state, action) {\n  state = state || initialState;\n  action = action || {};\n\n  switch(action.type) {\n    // Inserts new posts into the local store\n    case INSERT: {\n\n\n      // Add in the new posts\n      // Notice that we do not need to increment the post id. Since the post that we\n      // are putting in is one that is returned by the api server which already has\n      // the id incremented.\n      const unsortedPosts = _.concat(state.visiblePosts, action.posts);\n\n      const visiblePosts = _.orderBy(unsortedPosts, 'createdAt','desc');\n\n      // Return updated state\n      return _.assign({}, state, { visiblePosts} );\n    }\n    // Changes a single post's data in the local store\n    case CHANGE: {\n      const visiblePosts = _.clone(state.visiblePosts);\n      const changedIndex = _.findIndex(state.visiblePosts, {id: action.post.id })\n      visiblePosts[changedIndex] = action.post;\n      return _.assign({}, state, { visiblePosts });\n    }\n\n    // Removes a single post from the visible post list\n    case REMOVE: {\n      const visiblePosts = _.reject(state.visiblePosts, {id: action.id});\n      return _.assign({}, state, { visiblePosts });\n    }\n\n    default: return state;\n  }\n}\n\n// Now we define a whole bunch of action creators\n\n// Inserts posts into the post list\nreducer.insertPosts = (posts) => {\n  return { type: INSERT, posts };\n};\n\n// Removes a post from the visible post list\nreducer.removePost = (id) => {\n  return { type: REMOVE, id };\n};\n\n// Attempts to delete a post from the server and removes it from the visible\n// post list if successful\nreducer.deletePost = (postId) => {\n   // TODO Section 8: Add code to perform delete\n   return(dispatch) => {\n     api.delete('/posts/' + postId).then(() => {\n       dispatch(reducer.removePost(postID));\n     }).catch(() => {\n       alert('Failed to delete post.');\n     });\n   };\n};\n\n// Attempts to update a post on the server and updates local post data if\n// successful\nreducer.savePost = (editedPost, callback) => {\n  return (dispatch) => {\n    api.put('/posts/' + editedPost.id, editedPost).then((post) => {\n      // Saves local post.\n      dispatch(reducer.changePost(post));\n      callback();\n    }).catch(() => {\n      alert('Failed to save post.  Are all of the fields filled in correctly?');\n    });\n  };\n};\n\n// Attempts to create a post on the server and inserts it into the local post\n// list if successful\nreducer.createPost = (newPost, callback) => {\n  return (dispatch) => {\n    api.post('/posts', newPost).then((post) => {\n      // This post is one that the store returns us! It has post id incremented to the next available id\n      dispatch(reducer.insertPosts([post]));\n      callback();\n    }).catch(() => {\n      alert('Failed to create post. Are all of the fields filled in correctly?');\n    });\n  };\n};\n\n// Changes local post data\nreducer.changePost = (post) => {\n  return { type: CHANGE, post };\n};\n\n// Attempts to load more posts from the server and inserts them into the local\n// post list if successful\nreducer.loadMorePosts = (callback) => {\n  return (dispatch, getState) => {\n    const state = _.assign({}, initialState, getState().posts);\n\n    let path = '/posts';\n    if (state.visiblePosts.length > 0) {\n        const oldestPost =_.last(state.visiblePosts);\n        path = '/posts?olderThan=' + oldestPost.createdAt;\n    }\n    api.get(path).then((newPosts) => {\n      dispatch(reducer.insertPosts(newPosts));\n      callback();\n    }).catch(() => {\n      alert('Failed to load more posts');\n      callback('Failed to load more posts');\n    });\n\n  };\n\n\n};\n\n// Export the action creators and reducer\nmodule.exports = reducer;\n","const _ = require('lodash');\n\nconst UPDATE = 'blog-frontend/time/UPDATE';\n\nfunction reducer(state, action) {\n  state = state || {};\n  action = action || { type: null };\n\n  switch(action.type) {\n    case UPDATE: {\n      return _.assign({}, state, { now: action.timeNow });\n    } break;\n    default:\n      return state;\n  }\n}\n\nreducer.setCurrentTime = function(timeNow) {\n  return { type: UPDATE, timeNow }\n};\n\nmodule.exports = reducer;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2RlcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9jbGllbnQuanMiLCJzcmMvY29tcG9uZW50cy9EZXZUb29scy5qcyIsInNyYy9jb21wb25lbnRzL0hvbWUuanMiLCJzcmMvY29tcG9uZW50cy9Qb3N0LmpzIiwic3JjL2NvbXBvbmVudHMvUG9zdEVkaXQuanMiLCJzcmMvY29tcG9uZW50cy9Qb3N0TGlzdC5qcyIsInNyYy9jb21wb25lbnRzL1Bvc3ROZXcuanMiLCJzcmMvY29tcG9uZW50cy9Qb3N0Vmlldy5qcyIsInNyYy9jb21wb25lbnRzL1Jvb3QuanMiLCJzcmMvaGVscGVycy9hamF4LmpzIiwic3JjL2hlbHBlcnMvYXBpLmpzIiwic3JjL2hlbHBlcnMvY3JlYXRlQWN0aW9uRGlzcGF0Y2hlcnMuanMiLCJzcmMvaGVscGVycy9jcmVhdGVTdG9yZS5qcyIsInNyYy9yZWR1Y2Vycy9pbmRleC5qcyIsInNyYy9yZWR1Y2Vycy9wb3N0cy5qcyIsInNyYy9yZWR1Y2Vycy90aW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxJQUFNLFFBQVEsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNLFdBQVcsUUFBUSxXQUFSLENBQWpCOztBQUVBLElBQU0sY0FBYyxRQUFRLHVCQUFSLENBQXBCO0FBQ0EsSUFBTSxPQUFPLE1BQU0sYUFBTixDQUFvQixRQUFRLG1CQUFSLENBQXBCLENBQWI7O0FBRUEsSUFBTSxTQUFTLFFBQVEsUUFBUixDQUFmO0FBQ0EsSUFBTSxxQkFBcUIsUUFBUSxpQkFBUixDQUEzQjs7QUFFQSxJQUFNLG1CQUFtQixRQUFRLFlBQVIsQ0FBekI7O0FBRUE7O0FBRUEsT0FBTyxJQUFQLEdBQWMsVUFBQyxZQUFELEVBQWtCO0FBQzlCO0FBQ0EsTUFBTSxRQUFRLFlBQVksWUFBWixDQUFkO0FBQ0EsTUFBTSxnQkFBZ0IsS0FBSyxFQUFFLFlBQUYsRUFBTCxDQUF0Qjs7QUFFQTtBQUNB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QUFRLFNBQVMsRUFBakI7QUFDQSxXQUFTLFVBQVUsRUFBRSxNQUFNLElBQVIsRUFBbkI7O0FBRUEsVUFBTyxPQUFPLElBQWQ7QUFDRSxTQUFLLE1BQUw7QUFBYTtBQUNYLGVBQU8sRUFBRSxNQUFGLENBQVMsRUFBVCxFQUFhLEtBQWIsRUFBb0IsRUFBRSxLQUFLLE9BQU8sT0FBZCxFQUFwQixDQUFQO0FBQ0QsT0FBQztBQUNGO0FBQ0UsYUFBTyxLQUFQO0FBTEo7QUFPRDs7QUFFRCxRQUFRLGNBQVIsR0FBeUIsVUFBUyxPQUFULEVBQWtCO0FBQ3pDLFNBQU8sRUFBRSxNQUFNLE1BQVIsRUFBZ0IsZ0JBQWhCLEVBQVA7QUFDRCxDQUZEOztBQUlBLE9BQU8sT0FBUCxHQUFpQixPQUFqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbmNvbnN0IGNyZWF0ZVN0b3JlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2NyZWF0ZVN0b3JlJyk7XG5jb25zdCBSb290ID0gUmVhY3QuY3JlYXRlRmFjdG9yeShyZXF1aXJlKCcuL2NvbXBvbmVudHMvUm9vdCcpKTtcblxuY29uc3QgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5jb25zdCB0aW1lQWN0aW9uQ3JlYXRvcnMgPSByZXF1aXJlKCcuL3JlZHVjZXJzL3RpbWUnKTtcblxuY29uc3QgY29tYmluZWRSZWR1Y2VycyA9IHJlcXVpcmUoJy4vcmVkdWNlcnMnKTtcblxuLy8gVE9ETyBTZWN0aW9uIDY6IENoYW5nZSBjb2RlIGJlbG93IHRvIGdldCBkYXRhIGZyb20gdGhlIEFQSVxuXG53aW5kb3cubWFpbiA9IChpbml0aWFsU3RhdGUpID0+IHtcbiAgLy8gQ3JlYXRlIHJvb3QgUmVhY3QgY29tcG9uZW50IHdpdGggUmVkdXggc3RvcmVcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShpbml0aWFsU3RhdGUpO1xuICBjb25zdCByb290Q29tcG9uZW50ID0gUm9vdCh7IHN0b3JlIH0pO1xuXG4gIC8vIE1vdW50IFJlYWN0IHJvb3QgY29tcG9uZW50IGluIERPTVxuICBjb25zdCBtb3VudFBvaW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcbiAgUmVhY3RET00ucmVuZGVyKHJvb3RDb21wb25lbnQsIG1vdW50UG9pbnQpO1xuXG4gIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgc3RvcmUuZGlzcGF0Y2godGltZUFjdGlvbkNyZWF0b3JzLnNldEN1cnJlbnRUaW1lKG5vdykpO1xuICB9LCAxMDAwMCk7XG59XG4iLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWR1eERldnRvb2xzID0gcmVxdWlyZSgncmVkdXgtZGV2dG9vbHMnKTtcbmNvbnN0IERvY2tNb25pdG9yID0gcmVxdWlyZSgncmVkdXgtZGV2dG9vbHMtZG9jay1tb25pdG9yJykuZGVmYXVsdDtcbmNvbnN0IExvZ01vbml0b3IgPSByZXF1aXJlKCdyZWR1eC1kZXZ0b29scy1sb2ctbW9uaXRvcicpLmRlZmF1bHQ7XG5cbmNvbnN0IF9EZXZUb29scyA9IFJlZHV4RGV2dG9vbHMuY3JlYXRlRGV2VG9vbHMoXG4gIDxEb2NrTW9uaXRvciB0b2dnbGVWaXNpYmlsaXR5S2V5PVwiaFwiIGNoYW5nZVBvc2l0aW9uS2V5PVwicVwiIGRlZmF1bHRJc1Zpc2libGU9e3RydWV9PlxuICAgIDxMb2dNb25pdG9yIC8+XG4gIDwvRG9ja01vbml0b3I+XG4pO1xuXG5jbGFzcyBEZXZUb29scyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGlzTW91bnRlZDogZmFsc2UgfTtcbiAgfVxuXG4gIHN0YXRpYyBpbnN0cnVtZW50KCkge1xuICAgIHJldHVybiBfRGV2VG9vbHMuaW5zdHJ1bWVudChhcmd1bWVudHMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzTW91bnRlZDogdHJ1ZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3RoaXMuc3RhdGUuaXNNb3VudGVkICYmIDxfRGV2VG9vbHMgLz59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIFJlZHV4IGRldmVsb3BtZW50IHRvb2xzICh1c2VmdWwgZm9yIGRlYnVnZ2luZykuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gRGV2VG9vbHM7XG4iLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmNvbnN0IFBvc3RMaXN0ID0gcmVxdWlyZSgnLi9Qb3N0TGlzdCcpO1xuXG4vKipcbiAqIFRoZSBndXRzIG9mIHRoZSBob21lIHBhZ2UuXG4gKi9cbmNvbnN0IEhvbWUgPSAoKSA9PiAoXG4gIDxkaXY+XG4gICAgey8qIFRoZSBoZWFkaW5nIGFyZWEgb2YgdGhlIHBhZ2UgKi99XG4gICAgPGRpdiBjbGFzc05hbWU9XCJibG9nLWhlYWRlclwiPlxuICAgICAgPGgxIGNsYXNzTmFtZT1cImJsb2ctdGl0bGVcIj5BbiBFeGFtcGxlIG9mIGEgQmxvZzwvaDE+XG4gICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIGJsb2ctZGVzY3JpcHRpb25cIj5SZWFjdCBhbmQgUmVkdXggYW5kIEJvb3RzdHJhcCwgb2ggbXkhPC9wPlxuICAgIDwvZGl2PlxuICAgIHsvKiBBIGxpc3Qgb2YgYmxvZyBwb3N0cywgaW5jbHVkaW5nIGEgY291cGxlIG9mIGJ1dHRvbnMgKi99XG4gICAgPFBvc3RMaXN0IC8+XG4gIDwvZGl2PlxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIb21lO1xuIiwiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCBQb3N0RWRpdCA9IHJlcXVpcmUoJy4vUG9zdEVkaXQnKTtcbmNvbnN0IFBvc3RWaWV3ID0gcmVxdWlyZSgnLi9Qb3N0VmlldycpO1xuXG5jbGFzcyBQb3N0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgLy8gU2V0IGluaXRpYWwgaW50ZXJuYWwgc3RhdGUgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgdGhpcy5zdGF0ZSA9IHsgZWRpdGluZzogZmFsc2UgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBvcGVuRWRpdCA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0aW5nOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBjbG9zZUVkaXQgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGluZzogZmFsc2UgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNhdmVFZGl0ID0gKGVkaXRlZFBvc3QpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuc2F2ZVBvc3QoZWRpdGVkUG9zdCwgKGVycikgPT4ge1xuICAgICAgICBpZighZXJyKSBjbG9zZUVkaXQoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgZGVsZXRlVGhpc1Bvc3QgPSAoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLmRlbGV0ZVBvc3QodGhpcy5wcm9wcy5wb3N0LmlkKTtcbiAgICB9O1xuXG4gICAgLy8gVE9ETyBTZWN0aW9uIDg6IEFkZCBjb2RlIGZvciBkZWxldGVcblxuICAgIGlmKHRoaXMuc3RhdGUuZWRpdGluZykge1xuICAgICAgLy8gUmVuZGVyIGNvbXBvbmVudCBmb3IgZWRpdGluZyB0aGUgcG9zdFxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFBvc3RFZGl0XG4gICAgICAgICAgcG9zdD17dGhpcy5wcm9wcy5wb3N0fVxuICAgICAgICAgIG9uU2F2ZT17c2F2ZUVkaXR9XG4gICAgICAgICAgb25DYW5jZWw9e2Nsb3NlRWRpdH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICAgIC8vIFJlbmRlciByZWFkLW9ubHkgdmlldyBvZiB0aGUgcG9zdFxuICAgIC8vIFRPRE8gU2VjdGlvbiA4OiBhZGQgY29kZSBmb3IgZGVsZXRlXG4gICAgcmV0dXJuIChcbiAgICAgIDxQb3N0Vmlld1xuICAgICAgICBwb3N0PXt0aGlzLnByb3BzLnBvc3R9XG4gICAgICAgIHRpbWU9e3RoaXMucHJvcHMudGltZX1cbiAgICAgICAgb25EZWxldGU9e2RlbGV0ZVRoaXNQb3N0fVxuICAgICAgICBvbkVkaXQ9e29wZW5FZGl0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbi8vIEV4cG9ydCB0aGUgUG9zdCBjb21wb25lbnRcbm1vZHVsZS5leHBvcnRzID0gUG9zdDtcbiIsImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuLyoqXG4gKiBBIGZvcm0gZm9yIGVkaXRpbmcgYSBibG9nIHBvc3QuXG4gKi9cbmNsYXNzIFBvc3RFZGl0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgY29uc3QgcG9zdCA9IHByb3BzLnBvc3QgfHwge307XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGl0bGU6IHBvc3QudGl0bGUgfHwgJycsXG4gICAgICBjb250ZW50OiBwb3N0LmNvbnRlbnQgfHwgJydcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHJldmVydEFuZFN0b3BFZGl0aW5nID0gKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xuICAgIH07XG5cbiAgICBjb25zdCBzdWJtaXRBbmRTdG9wRWRpdGluZyA9IChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIENyZWF0ZXMgYSBuZXcgcG9zdCBvYmplY3QgYW5kIHNhdmVzIGl0LlxuICAgICAgY29uc3QgZWRpdGVkUG9zdCA9IF8uYXNzaWduKHt9LCB0aGlzLnByb3BzLnBvc3QsIHtcbiAgICAgICAgdGl0bGU6IHRoaXMuc3RhdGUudGl0bGUsXG4gICAgICAgIGNvbnRlbnQ6IHRoaXMuc3RhdGUuY29udGVudFxuICAgICAgfSk7XG4gICAgICB0aGlzLnByb3BzLm9uU2F2ZShlZGl0ZWRQb3N0KTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25UaXRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRpdGxlOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uQ29udGVudENoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvbnRlbnQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIGNsYXNzTmFtZT1cImJsb2ctcG9zdFwiPlxuICAgICAgICB7LyogVGl0bGUgZmllbGQgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2wgaW5wdXQtbGdcIiB2YWx1ZT17dGhpcy5zdGF0ZS50aXRsZX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUG9zdCB0aXRsZVwiIG9uQ2hhbmdlPXtvblRpdGxlQ2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogQ29udGVudCBmaWVsZCAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiAzMDAgfX1cbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmNvbnRlbnR9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25Db250ZW50Q2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogU2F2ZSBidXR0b24gKi99XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IHB1bGwtcmlnaHRcIlxuICAgICAgICAgIG9uQ2xpY2s9e3N1Ym1pdEFuZFN0b3BFZGl0aW5nfVxuICAgICAgICA+XG4gICAgICAgICAgU2F2ZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgey8qIENhbmNlbCBidXR0b24gKi99XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IHB1bGwtcmlnaHRcIlxuICAgICAgICAgIHN0eWxlPXt7IG1hcmdpblJpZ2h0OiAnMTJweCcgfX1cbiAgICAgICAgICBvbkNsaWNrPXtyZXZlcnRBbmRTdG9wRWRpdGluZ31cbiAgICAgICAgPlxuICAgICAgICAgIENhbmNlbFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9zdEVkaXQ7XG4iLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWFjdFJlZHV4ID0gcmVxdWlyZSgncmVhY3QtcmVkdXgnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuY29uc3QgcG9zdHNBY3Rpb25DcmVhdG9ycyA9IHJlcXVpcmUoJy4uL3JlZHVjZXJzL3Bvc3RzJyk7XG5jb25zdCBjcmVhdGVBY3Rpb25EaXNwYXRjaGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY3JlYXRlQWN0aW9uRGlzcGF0Y2hlcnMnKTtcbmNvbnN0IFBvc3QgPSByZXF1aXJlKCcuL1Bvc3QnKTtcbmNvbnN0IFBvc3ROZXcgPSByZXF1aXJlKCcuL1Bvc3ROZXcnKTtcblxuLyoqXG4gKiBBIGxpc3Qgb2YgYmxvZyBwb3N0cywgYWxvbmcgd2l0aCBidXR0b25zIGZvciB3cml0aW5nIGEgbmV3IHBvc3RcbiAqIGFuZCBsb2FkaW5nIG1vcmUgcG9zdHMuXG4gKi9cbmNsYXNzIFBvc3RMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgLy8gU2V0IGluaXRpYWwgaW50ZXJuYWwgc3RhdGUgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgdGhpcy5zdGF0ZSA9IHsgbG9hZGluZzogZmFsc2UgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBvbkxvYWRCdXR0b25DbGljayA9ICgpID0+IHtcbiAgICAgIC8vIElmIHdlIGFyZSBub3QgYWxyZWFkeSBpbiB0aGUgcHJvY2VzcyBvZiBsb2FkaW5nIHBvc3RzLFxuICAgICAgLy8gc3RhcnQgbG9hZGluZyBtb3JlIHBvc3RzLlxuICAgICAgaWYoIXRoaXMuc3RhdGUubG9hZGluZykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5sb2FkTW9yZVBvc3RzKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBGdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgcG9zdCBjb21wb25lbnQgZnJvbSBhIHBvc3QgSURcbiAgICBjb25zdCBjcmVhdGVQb3N0Q29tcG9uZW50ID0gKGN1cnJlbnRQb3N0KSA9PiB7XG4gICAgICAvKiBUT0RPIFNlY3Rpb24gODogQWRkIGNvZGUgZm9yIGRlbGV0ZSAqL1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFBvc3RcbiAgICAgICAgICBrZXk9e2N1cnJlbnRQb3N0LmlkfVxuICAgICAgICAgIHBvc3Q9e2N1cnJlbnRQb3N0fVxuICAgICAgICAgIHRpbWU9e3RoaXMucHJvcHMudGltZX1cbiAgICAgICAgICBzYXZlUG9zdD17dGhpcy5wcm9wcy5zYXZlUG9zdH1cbiAgICAgICAgICBkZWxldGVQb3N0PXt0aGlzLnByb3BzLmRlbGV0ZVBvc3R9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibG9nLW1haW5cIj5cbiAgICAgICAgICB7LyogQnV0dG9uIGZvciB3cml0aW5nIGEgbmV3IHBvc3QgKi99XG4gICAgICAgICAgPFBvc3ROZXdcbiAgICAgICAgICAgIGNyZWF0ZVBvc3Q9e3RoaXMucHJvcHMuY3JlYXRlUG9zdH1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgey8qIFRPRE8gU2VjdGlvbiAzOiBXcml0ZSBjb2RlIHRvIGxpc3QgYWxsIHRoZSBwb3N0cyAqL1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5wb3N0cy52aXNpYmxlUG9zdHMubWFwKGNyZWF0ZVBvc3RDb21wb25lbnQpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgey8qIEJ1dHRvbiBmb3IgbG9hZGluZyBtb3JlIHBvc3RzICovfVxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYmxvZy1sb2FkLW1vcmUgYnRuIGJ0bi1kZWZhdWx0IGJ0bi1sZ1wiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkxvYWRCdXR0b25DbGlja31cbiAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmxvYWRpbmd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMuc3RhdGUubG9hZGluZyA/ICdMb2FkaW5nLi4uJyA6ICdMb2FkIG1vcmUgcG9zdHMnfVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuLy8gQ29ubmVjdCBQb3N0TGlzdCBjb21wb25lbnQgdG8gdGhlIFJlZHV4IHN0b3JlXG5jb25zdCBQb3N0TGlzdENvbnRhaW5lciA9IFJlYWN0UmVkdXguY29ubmVjdChcbiAgLy8gTWFwIHN0b3JlIHN0YXRlIHRvIHByb3BzXG4gIChzdGF0ZSkgPT4gKHtcbiAgICBwb3N0czogc3RhdGUucG9zdHMsXG4gICAgdGltZTogc3RhdGUudGltZVxuICB9KSxcbiAgY3JlYXRlQWN0aW9uRGlzcGF0Y2hlcnMocG9zdHNBY3Rpb25DcmVhdG9ycylcbikoUG9zdExpc3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvc3RMaXN0Q29udGFpbmVyO1xuIiwiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUG9zdEVkaXQgPSByZXF1aXJlKCcuL1Bvc3RFZGl0Jyk7XG5cbi8qKlxuICogQSBidXR0b24gd2hpY2ggZXhwYW5kcyBpbnRvIGEgZm9ybSBmb3Igd3JpdGluZyBhIG5ldyBwb3N0LlxuICovXG5jbGFzcyBQb3N0TmV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgLy8gU2V0IGluaXRpYWwgaW50ZXJuYWwgc3RhdGUgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgdGhpcy5zdGF0ZSA9IHsgZWRpdGluZzogZmFsc2UgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBvcGVuRWRpdCA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0aW5nOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBjbG9zZUVkaXQgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGluZzogZmFsc2UgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWF0ZVBvc3QgPSAobmV3UG9zdCkgPT4ge1xuICAgICAgdGhpcy5wcm9wcy5jcmVhdGVQb3N0KG5ld1Bvc3QsIChlcnIpID0+IHtcbiAgICAgICAgaWYoIWVycikgY2xvc2VFZGl0KCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gVE9ETyBTZWN0aW9uIDc6IFdyaXRlIGNvZGUgdG8gc3dpdGNoIHRvIGVkaXQgbW9kZSB3aGVuIGVkaXRpbmcgaXMgY2xpY2tlZFxuICAgIGlmKHRoaXMuc3RhdGUuZWRpdGluZyl7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxQb3N0RWRpdFxuICAgICAgICAgIHBvc3Q9e3RoaXMucHJvcHMucG9zdH1cbiAgICAgICAgICBvblNhdmU9e2NyZWF0ZVBvc3R9XG4gICAgICAgICAgb25DYW5jZWw9e2Nsb3NlRWRpdH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYmxvZy1sb2FkLW1vcmUgYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZ1wiXG4gICAgICAgIG9uQ2xpY2s9eyBvcGVuRWRpdCB9XG4gICAgICA+XG4gICAgICAgIFdyaXRlIG5ldyBwb3N0XG4gICAgICA8L2J1dHRvbj5cbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9zdE5ldztcbiIsImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG4vKipcbiAqIFJlbmRlciBlZGl0L2RlbGV0ZSBidXR0b25zIGFuZCBwb3N0IHRpbWVzdGFtcC5cbiAqXG4gKiBMaXN0IG9mIHByb3BzOiBwb3N0LCB0aW1lLCBvbkVkaXQsIG9uRGVsZXRlXG4gKi9cbmNvbnN0IFBvc3RNZXRhID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJibG9nLXBvc3QtbWV0YVwiPlxuICAgICAgPGEgcm9sZT1cImJ1dHRvblwiIHRpdGxlPVwiRWRpdCBwb3N0XCJcbiAgICAgICAgc3R5bGU9e3sgcGFkZGluZ1JpZ2h0OiAnOHB4JyB9fVxuICAgICAgICBvbkNsaWNrPXsgcHJvcHMub25FZGl0IH1cbiAgICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmEgZmEtZWRpdFwiIC8+XG4gICAgICA8L2E+XG5cbiAgICAgIHsvKiBUT0RPIFNlY3Rpb24gODogQWRkIGEgZGVsZXRlIGJ1dHRvbiAqL31cbiAgICAgIDxhIHJvbGU9XCJidXR0b25cIiB0aXRsZT1cIkRlbGV0ZSBwb3N0XCJcbiAgICAgIHN0eWxlPXt7IHBhZGRpbmdSaWdodDogJzhweCcgfX1cbiAgICAgIG9uQ2xpY2s9eyBwcm9wcy5vbkRlbGV0ZSB9XG4gICAgICA+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZhIGZhLXJlbW92ZVwiIC8+XG4gICAgICA8L2E+XG4gICAgICB7IG1vbWVudChwcm9wcy5wb3N0LmNyZWF0ZWRBdCkuZnJvbShwcm9wcy50aW1lLm5vdykgfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuLyoqXG4gKiBBIHJlYWQtb25seSB2aWV3IG9mIGEgYmxvZyBwb3N0LlxuICogVGhpcyBpcyBhIHN0YXRlbGVzcyBmdW5jdGlvbmFsIGNvbXBvbmVudC5cbiAqIEl0IHRha2VzIHByb3BzIGFzIGl0cyBhcmdzIGFuZCByZXR1cm5zIHdoYXQgdGhlIHJlbmRlciBtZXRob2Qgd291bGQgcmV0dXJuLlxuICpcbiAqIExpc3Qgb2YgcHJvcHM6IHBvc3QsIHRpbWUsIG9uRWRpdCwgb25EZWxldGVcbiAqL1xuY29uc3QgUG9zdFZpZXcgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImJsb2ctcG9zdFwiPlxuICAgICAgPGgyIGNsYXNzTmFtZT1cImJsb2ctcG9zdC10aXRsZVwiPntwcm9wcy5wb3N0LnRpdGxlfTwvaDI+XG5cbiAgICAgIHsvKiBUT0RPIFNlY3Rpb24gNDogRGlzcGxheSBibG9nIG1ldGFkYXRhICovfVxuICAgICAgPFBvc3RNZXRhIHsuLi5wcm9wc30gLz5cblxuICAgICAgey8qIFRPRE8gU2VjdGlvbiA0OiBEaXNwbGF5IGJsb2cgY29udGVudCAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxvZy1wb3N0LWNvbnRlbnRcIj57cHJvcHMucG9zdC5jb250ZW50fTwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb3N0VmlldztcbiIsIi8qKlxuICogVGhlIHJvb3QgUmVhY3QgY29tcG9uZW50IGZyb20gd2hpY2ggYWxsIG90aGVyIGNvbXBvbmVudHMgb24gdGhlIHBhZ2UgYXJlXG4gKiBkZXNjZW5kZWQuIEl0IGlzIHRoaXMgY29tcG9uZW50IHdoaWNoIGlzIGRpcmVjdGx5IG1vdW50ZWQgb24gdGhlIERPTS5cbiAqL1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWFjdFJlZHV4ID0gcmVxdWlyZSgncmVhY3QtcmVkdXgnKTtcblxuY29uc3QgUHJvdmlkZXIgPSBSZWFjdFJlZHV4LlByb3ZpZGVyO1xuY29uc3QgSG9tZSA9IHJlcXVpcmUoJy4vSG9tZScpO1xuXG4vLyBFbmFibGUgZGV2ZWxvcG1lbnQgdG9vbHMgd2hlbiBpbiBkZXZlbG9wbWVudCBtb2RlXG5sZXQgRGV2VG9vbHMgPSAnc3Bhbic7XG5pZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBEZXZUb29scyA9IHJlcXVpcmUoJy4vRGV2VG9vbHMnKTtcbn1cblxuLy8gRGVmaW5lIHRoZSBSb290IGNvbXBvbmVudFxuY29uc3QgUm9vdCA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIC8qIFRoZSBQcm92aWRlciBnaXZlcyBkZXNjZW5kYW50cyB0aGUgYWJpbGl0eSB0byBjb25uZWN0IHRvIHRoZSBSZWR1eCBzdG9yZSAqL1xuICAgIDxQcm92aWRlciBzdG9yZT17cHJvcHMuc3RvcmV9PlxuICAgICAgPGRpdj5cbiAgICAgICAgey8qIFRoZSBIb21lIGNvbXBvbmVudCBjb250YWlucyB0aGUgZ3V0cyBvZiB0aGUgcGFnZSAqL31cbiAgICAgICAgPEhvbWUgLz5cbiAgICAgICAgey8qIERldlRvb2xzIGlzIGp1c3QgYW4gZW1wdHkgZWxlbWVudCB3aGVuIG5vdCBpbiBkZXZlbG9wbWVudCBtb2RlICovfVxuICAgICAgICA8RGV2VG9vbHMgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUHJvdmlkZXI+XG4gICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3Q7XG4iLCJjb25zdCBhamF4ID0ge307XG5cbmlmKHByb2Nlc3MuZW52LklOX0JST1dTRVIpIHtcbiAgYWpheC5yZXF1ZXN0ID0gKG9wdHMpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0O1xuICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKCdSZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH0pO1xuICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGlmKHhoci5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1JlY2VpdmVkIHN0YXR1cyAnICsgeGhyLnN0YXR1cykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUob3B0cy5qc29uID8gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSA6IHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHhoci5vcGVuKG9wdHMubWV0aG9kLCBvcHRzLnVybCk7XG4gICAgICBpZihvcHRzLmpzb24pIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIHhoci5zZW5kKG9wdHMuZGF0YSAhPT0gdW5kZWZpbmVkID8gSlNPTi5zdHJpbmdpZnkob3B0cy5kYXRhKSA6IG9wdHMuZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4aHIuc2VuZChvcHRzLmRhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuICBhamF4LnJlcXVlc3QgPSAob3B0cykgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBvcHRzLnVybCxcbiAgICAgICAgbWV0aG9kOiBvcHRzLm1ldGhvZCxcbiAgICAgICAgYm9keTogb3B0cy5kYXRhLFxuICAgICAgICBqc29uOiBvcHRzLmpzb25cbiAgICAgIH0sIChlcnJvciwgcmVzcG9uc2UsIGJvZHkpID0+IHtcbiAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUmVjZWl2ZWQgc3RhdHVzICcgKyByZXNwb25zZS5zdGF0dXNDb2RlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShib2R5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWpheDtcbiIsImNvbnN0IGFqYXggPSByZXF1aXJlKCcuL2FqYXgnKTtcblxuY29uc3QgYXBpID0ge307XG5cbmlmKHByb2Nlc3MuZW52LklOX0JST1dTRVIpIHtcbiAgYXBpLmJhc2VVcmwgPSAnL2FwaSc7XG59IGVsc2Uge1xuICBhcGkuYmFzZVVybCA9ICdodHRwOi8vYXBpOjMwMDAnO1xufVxuXG5hcGkuZ2V0ID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gYWpheC5yZXF1ZXN0KHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogdGhpcy5iYXNlVXJsICsgcGF0aCxcbiAgICBqc29uOiB0cnVlXG4gIH0pO1xufTtcblxuYXBpLnBvc3QgPSBmdW5jdGlvbihwYXRoLCBkYXRhKSB7XG4gIHJldHVybiBhamF4LnJlcXVlc3Qoe1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHVybDogdGhpcy5iYXNlVXJsICsgcGF0aCxcbiAgICBqc29uOiB0cnVlLFxuICAgIGRhdGFcbiAgfSk7XG59O1xuXG5hcGkucHV0ID0gZnVuY3Rpb24ocGF0aCwgZGF0YSkge1xuICByZXR1cm4gYWpheC5yZXF1ZXN0KHtcbiAgICBtZXRob2Q6ICdQVVQnLFxuICAgIHVybDogdGhpcy5iYXNlVXJsICsgcGF0aCxcbiAgICBqc29uOiB0cnVlLFxuICAgIGRhdGFcbiAgfSk7XG59O1xuXG5hcGkuZGVsZXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gYWpheC5yZXF1ZXN0KHtcbiAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgIHVybDogdGhpcy5iYXNlVXJsICsgcGF0aCxcbiAgICBqc29uOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBhcGk7XG4iLCJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIC8vIEdldCBhbiBhcnJheSBvZiBhcmd1bWVudHMgcGFzc2VkIGludG8gdGhpcyBmdW5jdGlvblxuICBjb25zdCBhY3Rpb25DcmVhdG9yc0FycmF5ID0gXy5hc3NpZ24oW10sIGFyZ3VtZW50cyk7XG5cbiAgLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBnaXZlbiBhIGRpc3BhdGNoIGZ1bmN0aW9uLCByZXR1cm5zIGFuXG4gIC8vIG9iamVjdCBjb250YWluaW5nIGEgYnVuY2ggb2YgYWN0aW9uIGRpc3BhdGNoZXJzXG4gIHJldHVybiAoZGlzcGF0Y2gpID0+XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFjdGlvbkNyZWF0b3JzQXJyYXksIHdoaWNoIGlzIGFuIGFycmF5IG9mIGFycmF5cyBvZiBhY3Rpb25cbiAgICAvLyBjcmVhdG9yc1xuICAgIGFjdGlvbkNyZWF0b3JzQXJyYXkucmVkdWNlKChhY3Rpb25EaXNwYXRjaGVycywgYWN0aW9uQ3JlYXRvcnMpID0+IHtcbiAgICAgIC8vIEFkZCBhbiBhY3Rpb24gZGlzcGF0Y2hlciBmb3IgZWFjaCBhY3Rpb24gY3JlYXRvciBpbiBhY3Rpb25DcmVhdG9yc1xuICAgICAgT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpXG4gICAgICAgIC5maWx0ZXIoKG5hbWUpID0+ICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpKVxuICAgICAgICAuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgIGFjdGlvbkRpc3BhdGNoZXJzW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnNbbmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICByZXR1cm4gYWN0aW9uRGlzcGF0Y2hlcnM7XG4gICAgfSwge30pO1xufTtcbiIsImNvbnN0IFJlZHV4ID0gcmVxdWlyZSgncmVkdXgnKTtcbmNvbnN0IHJlZHV4VGh1bmsgPSByZXF1aXJlKCdyZWR1eC10aHVuaycpLmRlZmF1bHQ7XG5jb25zdCBjb21iaW5lZFJlZHVjZXJzID0gcmVxdWlyZSgnLi4vcmVkdWNlcnMnKTtcblxubGV0IGVuaGFuY2VyO1xuXG5pZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGVuaGFuY2VyID0gUmVkdXguYXBwbHlNaWRkbGV3YXJlKHJlZHV4VGh1bmspXG59IGVsc2Uge1xuICBjb25zdCBEZXZUb29scyA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvRGV2VG9vbHMnKTtcblxuICBlbmhhbmNlciA9IFJlZHV4LmNvbXBvc2UoXG4gICAgLy8gRW5hYmxlcyBtaWRkbGV3YXJlXG4gICAgUmVkdXguYXBwbHlNaWRkbGV3YXJlKHJlZHV4VGh1bmspLFxuICAgIC8vIEVuYWJsZXMgRGV2VG9vbHNcbiAgICBEZXZUb29scy5pbnN0cnVtZW50KClcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsU3RhdGUgPT4ge1xuICBjb25zdCBzdG9yZSA9IFJlZHV4LmNyZWF0ZVN0b3JlKGNvbWJpbmVkUmVkdWNlcnMsIGluaXRpYWxTdGF0ZSwgZW5oYW5jZXIpO1xuICByZXR1cm4gc3RvcmU7XG59XG4iLCJjb25zdCBSZWR1eCA9IHJlcXVpcmUoJ3JlZHV4Jyk7XG5cbmNvbnN0IHBvc3RzID0gcmVxdWlyZSgnLi9wb3N0cycpO1xuY29uc3QgdGltZSA9IHJlcXVpcmUoJy4vdGltZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZHV4LmNvbWJpbmVSZWR1Y2Vycyh7XG4gIHBvc3RzLFxuICB0aW1lXG59KTtcbiIsImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYXBpJyk7XG5cbi8vIEFjdGlvbiB0eXBlIGNvbnN0YW50c1xuY29uc3QgSU5TRVJUID0gJ2Jsb2ctZnJvbnRlbmQvcG9zdHMvSU5TRVJUJztcbmNvbnN0IENIQU5HRSA9ICdibG9nLWZyb250ZW5kL3Bvc3RzL0NIQU5HRSc7XG5jb25zdCBSRU1PVkUgPSAnYmxvZy1mcm9udGVuZC9wb3N0cy9SRU1PVkUnO1xuXG4vLyBUaGUgaW5pdGlhbCBzdGF0ZSBvZiBibG9nIHBvc3QgZGF0YVxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICB2aXNpYmxlUG9zdHM6IFtcbiAgICB7IGlkOiA1LFxuICAgICAgdGl0bGU6IFwiRnJvbSBSZWR1eCBTdG9yZTogQ29tcGFuaWVzIHRoYXQgbWFrZSBjb21wdXRlcnNcIixcbiAgICAgIGNvbnRlbnQ6IFwiRGVsbCBBcHBsZSBUb3NoaWJhIEFjZXJcIixcbiAgICAgIGNyZWF0ZWRBdDogXCIyMDE2LTA5LTExVDIzOjI2OjM2LjAwMFpcIixcbiAgICAgIHVwZGF0ZWRBdDogXCIyMDE2LTA5LTExVDIzOjI2OjM2LjAwMFpcIlxuICAgIH0sXG4gICAge2lkOiA0LFxuICAgICB0aXRsZTogXCJGcm9tIFJlZHV4IFN0b3JlOiBEZWxsXCIsXG4gICAgIGNvbnRlbnQ6IFwiQSBjb21wYW55IHRoYXQgbWFrZXMgY29tcHV0ZXJzIFwiLFxuICAgICBjcmVhdGVkQXQ6IFwiMjAxNi0wOS0xMVQyMzoxODowOC4wMDBaXCIsXG4gICAgIHVwZGF0ZWRBdDogXCIyMDE2LTA5LTExVDIzOjE4OjA4LjAwMFpcIlxuICAgIH0sXG4gICAgeyBpZDogMyxcbiAgICAgIHRpdGxlOiBcIkZyb20gUmVkdXggU3RvcmU6IExlZ28gTmV4byBLbmlnaHRzXCIsXG4gICAgICBjb250ZW50OiBcIlRoZSBiZXN0IGxlZ28gdG95IHNldCBpbiB0aGUgd29ybGQuXCIsXG4gICAgICBjcmVhdGVkQXQ6IFwiMjAxNi0wOS0xMVQwNzo0NzozMC4wMDBaXCIsXG4gICAgICB1cGRhdGVkQXQ6IFwiMjAxNi0wOS0xMVQwNzo0NzozMC4wMDBaXCJcbiAgICB9LFxuICAgIHsgaWQ6IDIsXG4gICAgICB0aXRsZTogXCJGcm9tIFJlZHV4IFN0b3JlOiBSZWFjdFwiLFxuICAgICAgY29udGVudDogXCJBbiBhd2Vzb21lIEphdmFTY3JpcHQgbGlicmFyeSBmcm9tIOKAplwiLFxuICAgICAgY3JlYXRlZEF0OiBcIjIwMTYtMDktMTFUMDc6NDY6NTUuMDAwWlwiLFxuICAgICAgdXBkYXRlZEF0OiBcIjIwMTYtMDktMTFUMDc6NDY6NTUuMDAwWlwiXG4gICAgfSxcbiAgICB7IGlkOiAxLFxuICAgICAgdGl0bGU6IFwiRnJvbSBSZWR1eCBTdG9yZTogRGVlcCBMZWFybmluZ1wiLFxuICAgICAgY29udGVudDogXCJUaGUgdXNlIG9mIG5ldXJhbCBuZXR3b3JrcyB0byBsZWFybuKAplwiLFxuICAgICAgY3JlYXRlZEF0OiBcIjIwMTYtMDktMTFUMDc6NDY6MjguMDAwWlwiLFxuICAgICAgdXBkYXRlZEF0OiBcIjIwMTYtMDktMTFUMDc6NDY6MjguMDAwWlwiXG4gICAgfVxuXG4gIF1cbn07XG5cbi8vIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBjdXJyZW50IGRhdGEgc3RhdGUgYW5kIGFuIGFjdGlvbixcbi8vIGFuZCByZXR1cm5zIGEgbmV3IHN0YXRlXG5mdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgc3RhdGUgPSBzdGF0ZSB8fCBpbml0aWFsU3RhdGU7XG4gIGFjdGlvbiA9IGFjdGlvbiB8fCB7fTtcblxuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICAvLyBJbnNlcnRzIG5ldyBwb3N0cyBpbnRvIHRoZSBsb2NhbCBzdG9yZVxuICAgIGNhc2UgSU5TRVJUOiB7XG5cblxuICAgICAgLy8gQWRkIGluIHRoZSBuZXcgcG9zdHNcbiAgICAgIC8vIE5vdGljZSB0aGF0IHdlIGRvIG5vdCBuZWVkIHRvIGluY3JlbWVudCB0aGUgcG9zdCBpZC4gU2luY2UgdGhlIHBvc3QgdGhhdCB3ZVxuICAgICAgLy8gYXJlIHB1dHRpbmcgaW4gaXMgb25lIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhlIGFwaSBzZXJ2ZXIgd2hpY2ggYWxyZWFkeSBoYXNcbiAgICAgIC8vIHRoZSBpZCBpbmNyZW1lbnRlZC5cbiAgICAgIGNvbnN0IHVuc29ydGVkUG9zdHMgPSBfLmNvbmNhdChzdGF0ZS52aXNpYmxlUG9zdHMsIGFjdGlvbi5wb3N0cyk7XG5cbiAgICAgIGNvbnN0IHZpc2libGVQb3N0cyA9IF8ub3JkZXJCeSh1bnNvcnRlZFBvc3RzLCAnY3JlYXRlZEF0JywnZGVzYycpO1xuXG4gICAgICAvLyBSZXR1cm4gdXBkYXRlZCBzdGF0ZVxuICAgICAgcmV0dXJuIF8uYXNzaWduKHt9LCBzdGF0ZSwgeyB2aXNpYmxlUG9zdHN9ICk7XG4gICAgfVxuICAgIC8vIENoYW5nZXMgYSBzaW5nbGUgcG9zdCdzIGRhdGEgaW4gdGhlIGxvY2FsIHN0b3JlXG4gICAgY2FzZSBDSEFOR0U6IHtcbiAgICAgIGNvbnN0IHZpc2libGVQb3N0cyA9IF8uY2xvbmUoc3RhdGUudmlzaWJsZVBvc3RzKTtcbiAgICAgIGNvbnN0IGNoYW5nZWRJbmRleCA9IF8uZmluZEluZGV4KHN0YXRlLnZpc2libGVQb3N0cywge2lkOiBhY3Rpb24ucG9zdC5pZCB9KVxuICAgICAgdmlzaWJsZVBvc3RzW2NoYW5nZWRJbmRleF0gPSBhY3Rpb24ucG9zdDtcbiAgICAgIHJldHVybiBfLmFzc2lnbih7fSwgc3RhdGUsIHsgdmlzaWJsZVBvc3RzIH0pO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZXMgYSBzaW5nbGUgcG9zdCBmcm9tIHRoZSB2aXNpYmxlIHBvc3QgbGlzdFxuICAgIGNhc2UgUkVNT1ZFOiB7XG4gICAgICBjb25zdCB2aXNpYmxlUG9zdHMgPSBfLnJlamVjdChzdGF0ZS52aXNpYmxlUG9zdHMsIHtpZDogYWN0aW9uLmlkfSk7XG4gICAgICByZXR1cm4gXy5hc3NpZ24oe30sIHN0YXRlLCB7IHZpc2libGVQb3N0cyB9KTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OiByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuLy8gTm93IHdlIGRlZmluZSBhIHdob2xlIGJ1bmNoIG9mIGFjdGlvbiBjcmVhdG9yc1xuXG4vLyBJbnNlcnRzIHBvc3RzIGludG8gdGhlIHBvc3QgbGlzdFxucmVkdWNlci5pbnNlcnRQb3N0cyA9IChwb3N0cykgPT4ge1xuICByZXR1cm4geyB0eXBlOiBJTlNFUlQsIHBvc3RzIH07XG59O1xuXG4vLyBSZW1vdmVzIGEgcG9zdCBmcm9tIHRoZSB2aXNpYmxlIHBvc3QgbGlzdFxucmVkdWNlci5yZW1vdmVQb3N0ID0gKGlkKSA9PiB7XG4gIHJldHVybiB7IHR5cGU6IFJFTU9WRSwgaWQgfTtcbn07XG5cbi8vIEF0dGVtcHRzIHRvIGRlbGV0ZSBhIHBvc3QgZnJvbSB0aGUgc2VydmVyIGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIHZpc2libGVcbi8vIHBvc3QgbGlzdCBpZiBzdWNjZXNzZnVsXG5yZWR1Y2VyLmRlbGV0ZVBvc3QgPSAocG9zdElkKSA9PiB7XG4gICAvLyBUT0RPIFNlY3Rpb24gODogQWRkIGNvZGUgdG8gcGVyZm9ybSBkZWxldGVcbiAgIHJldHVybihkaXNwYXRjaCkgPT4ge1xuICAgICBhcGkuZGVsZXRlKCcvcG9zdHMvJyArIHBvc3RJZCkudGhlbigoKSA9PiB7XG4gICAgICAgZGlzcGF0Y2gocmVkdWNlci5yZW1vdmVQb3N0KHBvc3RJRCkpO1xuICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgYWxlcnQoJ0ZhaWxlZCB0byBkZWxldGUgcG9zdC4nKTtcbiAgICAgfSk7XG4gICB9O1xufTtcblxuLy8gQXR0ZW1wdHMgdG8gdXBkYXRlIGEgcG9zdCBvbiB0aGUgc2VydmVyIGFuZCB1cGRhdGVzIGxvY2FsIHBvc3QgZGF0YSBpZlxuLy8gc3VjY2Vzc2Z1bFxucmVkdWNlci5zYXZlUG9zdCA9IChlZGl0ZWRQb3N0LCBjYWxsYmFjaykgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgYXBpLnB1dCgnL3Bvc3RzLycgKyBlZGl0ZWRQb3N0LmlkLCBlZGl0ZWRQb3N0KS50aGVuKChwb3N0KSA9PiB7XG4gICAgICAvLyBTYXZlcyBsb2NhbCBwb3N0LlxuICAgICAgZGlzcGF0Y2gocmVkdWNlci5jaGFuZ2VQb3N0KHBvc3QpKTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgYWxlcnQoJ0ZhaWxlZCB0byBzYXZlIHBvc3QuICBBcmUgYWxsIG9mIHRoZSBmaWVsZHMgZmlsbGVkIGluIGNvcnJlY3RseT8nKTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8vIEF0dGVtcHRzIHRvIGNyZWF0ZSBhIHBvc3Qgb24gdGhlIHNlcnZlciBhbmQgaW5zZXJ0cyBpdCBpbnRvIHRoZSBsb2NhbCBwb3N0XG4vLyBsaXN0IGlmIHN1Y2Nlc3NmdWxcbnJlZHVjZXIuY3JlYXRlUG9zdCA9IChuZXdQb3N0LCBjYWxsYmFjaykgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgYXBpLnBvc3QoJy9wb3N0cycsIG5ld1Bvc3QpLnRoZW4oKHBvc3QpID0+IHtcbiAgICAgIC8vIFRoaXMgcG9zdCBpcyBvbmUgdGhhdCB0aGUgc3RvcmUgcmV0dXJucyB1cyEgSXQgaGFzIHBvc3QgaWQgaW5jcmVtZW50ZWQgdG8gdGhlIG5leHQgYXZhaWxhYmxlIGlkXG4gICAgICBkaXNwYXRjaChyZWR1Y2VyLmluc2VydFBvc3RzKFtwb3N0XSkpO1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICBhbGVydCgnRmFpbGVkIHRvIGNyZWF0ZSBwb3N0LiBBcmUgYWxsIG9mIHRoZSBmaWVsZHMgZmlsbGVkIGluIGNvcnJlY3RseT8nKTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8vIENoYW5nZXMgbG9jYWwgcG9zdCBkYXRhXG5yZWR1Y2VyLmNoYW5nZVBvc3QgPSAocG9zdCkgPT4ge1xuICByZXR1cm4geyB0eXBlOiBDSEFOR0UsIHBvc3QgfTtcbn07XG5cbi8vIEF0dGVtcHRzIHRvIGxvYWQgbW9yZSBwb3N0cyBmcm9tIHRoZSBzZXJ2ZXIgYW5kIGluc2VydHMgdGhlbSBpbnRvIHRoZSBsb2NhbFxuLy8gcG9zdCBsaXN0IGlmIHN1Y2Nlc3NmdWxcbnJlZHVjZXIubG9hZE1vcmVQb3N0cyA9IChjYWxsYmFjaykgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gXy5hc3NpZ24oe30sIGluaXRpYWxTdGF0ZSwgZ2V0U3RhdGUoKS5wb3N0cyk7XG5cbiAgICBsZXQgcGF0aCA9ICcvcG9zdHMnO1xuICAgIGlmIChzdGF0ZS52aXNpYmxlUG9zdHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBvbGRlc3RQb3N0ID1fLmxhc3Qoc3RhdGUudmlzaWJsZVBvc3RzKTtcbiAgICAgICAgcGF0aCA9ICcvcG9zdHM/b2xkZXJUaGFuPScgKyBvbGRlc3RQb3N0LmNyZWF0ZWRBdDtcbiAgICB9XG4gICAgYXBpLmdldChwYXRoKS50aGVuKChuZXdQb3N0cykgPT4ge1xuICAgICAgZGlzcGF0Y2gocmVkdWNlci5pbnNlcnRQb3N0cyhuZXdQb3N0cykpO1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICBhbGVydCgnRmFpbGVkIHRvIGxvYWQgbW9yZSBwb3N0cycpO1xuICAgICAgY2FsbGJhY2soJ0ZhaWxlZCB0byBsb2FkIG1vcmUgcG9zdHMnKTtcbiAgICB9KTtcblxuICB9O1xuXG5cbn07XG5cbi8vIEV4cG9ydCB0aGUgYWN0aW9uIGNyZWF0b3JzIGFuZCByZWR1Y2VyXG5tb2R1bGUuZXhwb3J0cyA9IHJlZHVjZXI7XG4iLCJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmNvbnN0IFVQREFURSA9ICdibG9nLWZyb250ZW5kL3RpbWUvVVBEQVRFJztcblxuZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHN0YXRlID0gc3RhdGUgfHwge307XG4gIGFjdGlvbiA9IGFjdGlvbiB8fCB7IHR5cGU6IG51bGwgfTtcblxuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFVQREFURToge1xuICAgICAgcmV0dXJuIF8uYXNzaWduKHt9LCBzdGF0ZSwgeyBub3c6IGFjdGlvbi50aW1lTm93IH0pO1xuICAgIH0gYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5yZWR1Y2VyLnNldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24odGltZU5vdykge1xuICByZXR1cm4geyB0eXBlOiBVUERBVEUsIHRpbWVOb3cgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWR1Y2VyO1xuIl19"}